#include <iostream>
using namespace std;

class Queue {
    
    int rear, front;
    int size;
    int *arr;
    public:
    Queue(int s){
        size = s;
        front = rear = -1;
        arr = new int[s];
    }

    void enQueue(int value){
        
	if ((front == 0 && rear == size-1) || (rear == (front-1)%(size-1)))
	{
		cout<< ("\nThe Queue is Full");
		return;
	}

	else if (front == -1) 
	{
		front = rear = 0;
		
	}

	else if (rear == size-1 && front != 0)
	{
		rear = 0;
	
	}

	else
	{
		rear++;
		
	}
    arr[rear] = value;
    }

    int deQueue(){

    if (front == -1){
        cout<<"\nThe Queue is Empty";
    }
    int data = arr[front];
    arr[front] = -1;

    if (front == rear){
        front = -1; 
        rear = -1;
    }
    else if (front == size-1){
        front = 0;
    }
    else{
        front++;
    }
    return data;
    }

    void display(){
        int i;
        if(front == -1){
            cout<<"\nThe Queue is Empty";
            return;
        }
        cout<<"\nElements in Circular Queue: ";
        if(rear >= front){
            for (int i = front; i<=rear;i++){
                cout<<arr[i]<<" ";
            }
            
            
        }
        else
	{
		for (int i = front; i < size; i++)
			cout<<( arr[i])<< " ";

		for (int i = 0; i <= rear; i++)
			cout<<( arr[i])<<" ";
	}

    }
};
int main()
{
	Queue q(5);
    q.deQueue();
    cout<<endl;
	q.enQueue(14);
    q.enQueue(22);
	q.enQueue(13);
	q.enQueue(-6);
    q.display();
    q.deQueue();
	q.display();
    q.enQueue(9);
    
    q.enQueue(4);
    q.display();

    q.enQueue(33);
    return 0;
}
